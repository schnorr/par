# -*- coding: utf-8 -*-
# -*- mode: org -*-
#+startup: beamer overview indent
#+LANGUAGE: pt-br
#+TAGS: noexport(n)
#+EXPORT_EXCLUDE_TAGS: noexport
#+EXPORT_SELECT_TAGS: export

#+Title: Decomposição de Domínio e Balanceamento de Carga
#+Author: Prof. Lucas M. Schnorr (UFRGS)
#+Date: \copyleft

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [xcolor=dvipsnames]
#+OPTIONS:   H:1 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+LATEX_HEADER: \input{../org-babel.tex}

* Decomposição de domínio
- Quebrar o problema em pedaços discretos de trabalho
  - Calculados em paralelo; com dependências
  - Também conhecido como particionamento (do problema)
- <2-> Existem basicamente dois tipos
  - Particionamento de domínio (mais comum)
  - Particionamento funcional
* Particionamento de domínio
- Neste tipo, os *dados* do problema são decompostos
  - Cada tarefa paralela é uma porção dos dados
\vfill
- <2-> Existem várias formas de particionar os dados
  #+BEGIN_CENTER
  #+ATTR_Latex: :width 8cm
  [[./img/distributions.png]]
  \hfill Author: Blaise Barney, LLNL
  #+END_CENTER
* Exemplo: Chameleon/Cholesky por blocos

- Particionamento estático por blocos
  - Caso com oito nós

#+ATTR_LATEX: :width \textwidth
[[./img/lt5_XY_task_mapping.png]]

* Particionamento funcional
- Foco na *cálculo* que será realizado (ao invés dos dados)
  - Cada tarefa realiza uma parte do trabalho
  #+BEGIN_CENTER
  #+ATTR_Latex: :width 8cm
  [[./img/functional_decomp.png]]
  \hfill Author: Blaise Barney, LLNL
  #+END_CENTER
- <2-> Bom quando as tarefas tem funcionamento é diferente
* Exemplo: modelagem de ecosistema

#+BEGIN_CENTER
#+ATTR_LATEX: :width \textwidth
[[./img/functional_ex1.png]]
\hfill Author: Blaise Barney, LLNL
#+END_CENTER

* Exemplo: processamento de sinais

#+BEGIN_CENTER
#+ATTR_LATEX: :width \textwidth
[[./img/functional_ex2.png]]
\hfill Author: Blaise Barney, LLNL
#+END_CENTER

* Exemplo: modelagem climática

#+BEGIN_CENTER
#+ATTR_LATEX: :width .8\textwidth
[[./img/functional_ex3.png]]
\hfill Author: Blaise Barney, LLNL
#+END_CENTER

* Balanceamento de carga
- Distribuir a mesma carga para os processos
  - *Minimização de tempo em idle*
- Ausência de um bom balanceamento \rightarrow baixo desempenho
  - <3-> Se há uma sincronização global; o mais lento domina
    #+BEGIN_CENTER
    #+ATTR_LATEX: :width .6\linewidth
    [[./img/load_bal1.png]]
    \hfill Author: Blaise Barney, LLNL
    #+END_CENTER
- <4-> Como obter balanceamento de carga?
* Balanceamento estático
- Para operações sobre matrizes
  - Distribuir igualmente o trabalho entre as tarefas
- <2-> Para laços
  - Distribuir igualmente as iterações entre as tarefas
\vfill
- <3-> Feita uma vez, no início
\vfill
- <4-> E quando:
  - Se tem *máquinas heterogêneas*?
  - Se tem *computação heterogênea*?
* Ondes3D: Spatial and temporal load imbalance
** Load distribution of first iteration                              :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.6\textheight
[[./img/ondes3d_spatial.png]]
#+END_CENTER

** Total cycles for all three kernels                                :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+BEGIN_CENTER
#+ATTR_LATEX: :width 0.6\textheight
[[./img/ondes3d_temporal.png]]
#+END_CENTER

** 
\footnotesize
#+LaTeX: \only<1>{%
*Spatial load imbalance (left):*
- \footnotesize *Borders*: /Absorbing boundary condition/ (CPML)
- *Smaller imbalances*: dependent on the _/rock multi-layer/_
  configuration of the _/input/_ 
#+LaTeX: }\only<2>{%
*Temporal (dynamic) load imbalance (right):*
- \footnotesize Variation in the number of cycles per iteration
- Nothing in code the indicates such temporal irregularity
#+LaTeX: }%
* Balenceamento dinâmico
- Problemas desbalanceados naturalmente
  - Vetores e matrizes esparsos
  - Métodos de grade adaptativos (/adaptative mesh refinement/)
  - Simulações N-body
\vfill
- <2-> Quantidade de trabalho
  - Intencionalmente (ou naturalmente) variável
  - Incapaz de ser prevista
- <2-> Capacidade computacional do HW
   - Variável, de acordo com temperatura
   - Nível de resiliência

\vfill
- <3-> Deve-se realizar um balanceamento contínuo, estratégias
  - Roubo de tarefas
  - Escalonador de tarefas (/runtime/)

* Referências
- Introduction to Parallel Computing
  - https://computing.llnl.gov/tutorials/parallel_comp/
- Exame de qualificação: Vinicius Garcia Pinto
  - http://www.inf.ufrgs.br/~vgpinto/slides/qualificacao.pdf

\vfill

- StarPU-MPI analysis: upcoming
- Tesser et al.
  - https://hal.inria.fr/hal-01391401 (Europar 2017)

* Comunicação                                                      :noexport:
** 
\vfill
\centering
\LARGE Comunicação
\vfill
** Quem precisa de comunicação?
- Depende do problema
  - Trivialmente paralelizável?
- Maioria dos problemas precisa de comunicação
  - Todas as vezes onde há necessidade de compartilhar dados
** Fatores a serem considerados
- Custo das comunicações
- Latência /vesus/ largura de banda
\vfill
- Mensagens pequenas /versus/ Mensagens grandes
** Visibilidade das comunicações
- Modelo de passagens de mensagens
  - Comunicações são explícitas, sob controle
- Modelo de paralelismo de dados
  - As comunicação são transparentes
    - Memória distribuída (Modelo PGAS)
    - Memória compartilhada
  - Fora de controle, não há como saber a implementação
** Comunicações síncronas ou assíncronas
- Bloqueantes /versus/ não bloqueantes
- Benefício das comunicações assíncronas
  - Sobreposição de cálculo e comunicação
** Escopo das comunicações
- Ponto-a-ponto
- <2->Coletivas
  #+BEGIN_CENTER
  \includegraphics[width=.6\linewidth]{collective_comm.pdf}    \\
  \footnotesize Author: Blaise Barney, LLNL      
  #+END_CENTER       
** Eficiência
- Programador pode ter escolha de fatores que afetam comunicações
  - Qual implementação para um determinado modelo?
    - Broadcast (coletiva) -- várias implementações, depende da
      arquitetura
  - Que tipo de comunicação: síncrono ou não?
  - Enlace físico (exemplo: Ethernet ou Infiniband?)
** Sobrecarga e complexidade
  #+BEGIN_CENTER
  \includegraphics[width=\linewidth]{helloWorldParallelCallgraph.pdf}    \\
  \footnotesize Author: Blaise Barney, LLNL      
  #+END_CENTER 
* Sincronização                                                    :noexport:
** 
\vfill
\centering
\LARGE Sincronização
\vfill
** Sincronização
- Gerenciar a ordem de operações que deve ser realizada
  - Pode ser um fator determinante para se obter desempenho
  - Seguidamente requer a ``serialização'' de segmentos do programa
- <2-> Tipos de sincronização
  - Barreira
  - Lock/Semáforos
  - Comunicação síncrona
** Barreira
- Implica que todas as tarefas estão envolvidas
- Cada tarefa trabalha até chegar na barreira
- As tarefas continuam no momento que todas estão na barreira
\vfill
- Por que ter uma barreira?
** Lock/Semáforos
- Pode envolver qualquer número de tarefas
- Usado para proteger um dado global ou seção de código
  - Apenas uma tarefa pode alterar uma variável global
- Pode ser bloqueante ou não-bloqueante
  - No nível do recurso computacional
** Comunicação síncrona
- Envolve apenas aquelas tarefas executando uma operação de comunicação
* Exemplo de simulação física                                      :noexport:
** 
\vfill
\centering
\LARGE Exemplo de Simulação Física
\vfill
** Transferência de calor (placa metálica)
- Introdução do problema com video
\vfill
- É possível calcular em paralelo?
- Particionamento?
- Comunicação?
- Sincronização?
* Sincronização                                                    :noexport:
** 
\vfill
\centering
\LARGE Sincronização
\vfill
** Sincronização
- Gerenciar a ordem de operações que deve ser realizada
  - Pode ser um fator determinante para se obter desempenho
  - Seguidamente requer a ``serialização'' de segmentos do programa
- <2-> Tipos de sincronização
  - Barreira
  - Lock/Semáforos
  - Comunicação síncrona
** Barreira
- Implica que todas as tarefas estão envolvidas
- Cada tarefa trabalha até chegar na barreira
- As tarefas continuam no momento que todas estão na barreira
\vfill
- Por que ter uma barreira?
** Lock/Semáforos
- Pode envolver qualquer número de tarefas
- Tipicamente usado para proteger um dado global ou seção de código
  - Apenas uma tarefa pode alterar uma variável global
- Pode ser bloqueante ou não-bloqueante
** Comunicação síncrona
- Envolve apenas aquelas tarefas executando uma operação de
  comunicação

* Dependência de dados                                             :noexport:
** 
\vfill
\centering
\LARGE Dependência de dados
\vfill
** Dependência de dados
- Uma *dependência* existe entre duas operações quando a ordem de
  execução dessas operações afeta o resultado do programa
- <2->Uma *dependência de dado* resulta da múltipla utilização da mesma
  localização em armazenamento por diferentes tarefas
\vfill
- <3->Dependências são importantes em programação paralela
  - Elas inibem paralelismo
** Dependência de dados carregada em laços
#+BEGIN_SRC C
  for (j = 0; j < 500; j++) {
    A[j] = A[j-1] * 2.0
  }
#+END_SRC
- <2-> Valor de A[j-1] tem que ser calculado antes de A[j]
  - Paralelismo é portanto inibido
- <3-> Se P2 tem a A[j] e P1 tem A[j-1]
  - <4->Memória distribuída
    - P2 deve obter A[j-1] de P1 depois que P1 termina
  - <5->Memória compartilhada
    - P2 deve ler A[j-1] depois que P1 o atualiza
** Dependência de dados em laços independentes
- P1
  #+BEGIN_SRC C
    X = 2
    //..
    Y = X * 2
  #+END_SRC
- P2
  #+BEGIN_SRC C
    X = 4
    //..
    Y = X * 3
  #+END_SRC
- <2-> Paralelismo é inibido; valor de Y depende:
  - <3->Memória distribuída
    - <4-> se ou quando o valor de X é comunicado
  - <5->Memória compartilhada
    - <6->Qual tarefa guarda por último o valor de X
** Como lidar com dependência de dados?
- <2-> Memória distribuída
  - Utilizar comunicação em pontos de sincronização
- <3-> Memória compartilhada
  - Sincronizar operações de leitura/escrita entre as tarefas
\vfill
- <4-> *Sincronização*

* Entrada/Saída (I/O)                                              :noexport:
** Problemas de Entrada/Saída
  - Em geral inibe o paralelismo
  - <2-> Requerem muito mais tempo que acesso à memória
 #+BEGIN_CENTER
 \includegraphics[width=.6\linewidth]{memoryAccessTimes.pdf}    \\
 \footnotesize Author: Blaise Barney, LLNL
 #+END_CENTER
  \vfill
  - <3-> Flutuações no tempo de operações de leitura 
 - No caso de múltiplas requisições ao mesmo tempo
  - <4->I/O sobre NFS pode ser catastrófico
** Alternativas para Entrada/Saída
- Sistema de arquivos paralelo existem
  - GPFS -- General Parallel File System (IBM)
  - Lustre -- Linux-only (Intel)
  - PVFS/PVFS2 (Clemson, Argonne, ...)
- <2-> MPI-2 tem funções para entrada/saída em paralelo
- <3-> Regras gerais
  - Regra #1: reduzir I/O o máximo possível
  - <4-> Usar sistema de arquivos paralelo se tiver acesso
  - <5-> Escrever bastante dados ao invés de pouco
  - <6-> Confinar entrada/saída para porções seriais do trabalho
  - <7-> Agregar entrada/saída
* Depuração                                                        :noexport:
** Depuração
- Depurar código paralelo pode ser bem difícil
  - Tarefa de depuração não é escalável
\vfill
- <2-> Solução básica: usar \texttt{gdb}
  - Como fazer em distribuído?
- <3-> Algumas ferramentas
  - TotalView (RogueWave Software)
  - DDT (Allinea)
  - Ispector (Intel)
  - STAT (LLNL)
- <4-> *Em geral, complexas de se utilizar*
* Análise de desempenho                                            :noexport:
** Análise de desempenho
- Pode ser bem difícil melhorar o desempenho
  - Várias técnicas para detectar o problema
\vfill
- <2-> Teremos duas aulas sobre esse assunto
- <3-> Para se adiantar, olhar: **Análise de Desempenho de Programas Paralelos**. Lucas Mello Schnorr. Short course (3 hours)
    prepared for the ERAD/RS 2014. Alegrete, RS, Brazil.
