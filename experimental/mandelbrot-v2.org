#+startup: overview indent
#+EXPORT_EXCLUDE_TAGS: noexport

* Mandelbrot LB ++ Revisited

This is strongly inspired by: [[./mandelbrot.org][Mandelbrot Load Balancing & Comm/Comp Ratio]].

1. Install akypuera & pajeng as in previous step-by-step
   - Install akypuera in $HOME/install/akypuera/
   - Install pajeng in  $HOME/install/pajeng/

2. Copy all contents of [[./mb-dir]] to PCAD
   #+begin_src shell :results output
   rsync -v -r mb-dir gppd-hpc.inf.ufrgs.br:./
   #+end_src

   #+RESULTS:
   #+begin_example
   sending incremental file list
   mb-dir/Makefile
   mb-dir/compute_mandelbrot_coordinates.c
   mb-dir/compute_one_mandelbrot_point.c
   mb-dir/mandelbrot-mpi.c
   mb-dir/mb-aky.slurm
   mb-dir/timing_functions.c

   sent 3,206 bytes  received 221 bytes  2,284.67 bytes/sec
   total size is 8,281  speedup is 2.42
   #+end_example

3. Review [[./mb-dir/mb-aky.slurm]]. Launch the SLURM script in PCAD
   #+begin_src shell :results output
   sbatch mb-dir/mb-aky.slurm
   #+end_src
   Wait for completion. Follow the execution with:
   #+begin_src shell :results output
   tail -f 70054.out
   #+end_src
   Replace ~70054~ by your ~JOB_ID~.

4. Copy contents of the experimental directory to your machine.
   #+begin_src shell :results output
   rsync -v -r gppd-hpc.inf:./mb_draco_70054 .
   #+end_src

   #+RESULTS:
   #+begin_example
   receiving incremental file list
   mb_draco_70054/
   mb_draco_70054/70054.err
   mb_draco_70054/70054.out
   mb_draco_70054/nodes.70054
   mb_draco_70054/rastro.csv
   mb_draco_70054/rastro.paje
   mb_draco_70054/mb-dir/
   mb_draco_70054/mb-dir/Makefile
   mb_draco_70054/mb-dir/compute_mandelbrot_coordinates.c
   mb_draco_70054/mb-dir/compute_mandelbrot_coordinates.o
   mb_draco_70054/mb-dir/compute_one_mandelbrot_point.c
   mb_draco_70054/mb-dir/compute_one_mandelbrot_point.o
   mb_draco_70054/mb-dir/mandelbrot-mpi-akypuera
   mb_draco_70054/mb-dir/mandelbrot-mpi.c
   mb_draco_70054/mb-dir/mandelbrot-mpi.o
   mb_draco_70054/mb-dir/mb-aky.slurm
   mb_draco_70054/mb-dir/timing_functions.c
   mb_draco_70054/mb-dir/timing_functions.o

   sent 344 bytes  received 194,740 bytes  130,056.00 bytes/sec
   total size is 193,403  speedup is 0.99
   #+end_example
   See the example that has been executed [[./mb_draco_70054]].

5. (Optional) Compute LB as in [[./mandelbrot.org][previous tutorial]].
   - You'll need a decent R version with the tidyverse package
     #+begin_src shell :results output
     install.packages("tidyverse") # this might take a while
     #+end_src

     Read the data

     #+begin_src R :results output :session :exports both
     library(tidyverse)
     df <- read_csv("mb_draco_70054/rastro.csv", col_names = FALSE, col_types=cols(
                                                                        X1 = col_character(),
                                                                        X2 = col_character(),
                                                                        X3 = col_character(),
                                                                        X4 = col_double(),
                                                                        X5 = col_double(),
                                                                        X6 = col_double(),
                                                                        X7 = col_double(),
                                                                        X8 = col_character()
                                                                    )) %>%
         mutate(Rank = gsub("rank", "", X2)) %>%
         select(-X1, -X2, -X3, -X7) %>%
         rename(Start = X4,
                End = X5,
                Duration = X6,
                Value = X8) %>%
         mutate(Rank = as.integer(Rank)) %>%
         select(Rank, everything())
     #+end_src

     #+RESULTS:

     Per-rank compute and communication time

     #+begin_src R :results output :session :exports both
     df %>%
         group_by(Rank) %>%
         summarize(Time = max(End) - min(Start) - sum(Duration)) %>%
         mutate(Value = "Compute") -> df.compute
     df %>%
         group_by(Rank, Value) %>%
         summarize(Time = sum(Duration)) -> df.communication;
     #+end_src

     #+RESULTS:

     Plot

     #+begin_src R :results output graphics :file img/mb-aky-comp-comm-per-rank.png :exports both :width 800 :height 400 :session
     df.compute %>%
         bind_rows(df.communication) %>%
         ggplot(aes(x = Rank, y = Time, fill=Value)) +
         geom_bar(stat='identity', width=1) +
         scale_fill_brewer(palette="Set1") +
         theme_bw(base_size = 22) +
         ylim(0,NA)
     #+end_src

     #+RESULTS:
     [[file:img/mb-aky-comp-comm-per-rank.png]]
6. There are load imbalances, and most of the time is spent in
   communication. Discuss with your colleagues on how to improve the
   application code to mitigate such LB and excessive communication
   time. Are synchronous collective operations the best way to do?
   Could we use asynchronous point-to-point operations to do it?
